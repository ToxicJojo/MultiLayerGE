// The data that each node needs to save to be able to run hits
struct HITSData {
  double HubScore;
  double OldHubScore;
  double AuthorityScore;
  double OldAuthorityScore;
}


// Proxy Protocols

struct HITSProxyMessage {
  AlgorithmOptions AlgorithmOptions;
  OutputOptions OutputOptions;
  double InitialValue;
  double Epsilon;
  bool SeperateLayers;
}

protocol HITSProxy {
  Type: Syn;
  Request: HITSProxyMessage;
  Response: void;
}

struct HITSTopNodesProxyMessage {
  AlgorithmOptions AlgorithmOptions;
  OutputOptions OutputOptions;
  int NumberOfTopNodes;
  bool SeperateLayers;
}

protocol HITSTopAuthoritiesProxy {
  Type: Syn;
  Request: HITSTopNodesProxyMessage;
  Response: AlgorithmResult;
}

protocol HITSTopHubsProxy {
  Type: Syn;
  Request: HITSTopNodesProxyMessage;
  Response: AlgorithmResult;
}

// Server Protocols

struct HITSSEtInitialValueMessage {
  double InitialValue;
}

protocol HITSSetInitialValue {
  Type: Asyn;
  Request: HITSSEtInitialValueMessage;
  Response: void;
}

struct HITSUpdateMessage {
  bool SeperateLayers;
}

protocol HITSHubUpdateRound {
  Type: Asyn;
  Request: HITSUpdateMessage;
  Response: void;
}



protocol HITSGetBulkAuthValues {
  Type: Asyn;
  Request: RemoteBulkGetMessage;
  Response: void;
}


protocol HITSGetBulkAuthValuesAnswer {
  Type: Asyn;
  Request: RemoteBulkGetResponseMessage;
  Response: void;
}

struct HITSNormalizationMessage {
  double Sum;
}

protocol HITSHubNormalization {
  Type: Asyn;
  Request: HITSNormalizationMessage;
  Response: void;
}

// Auth
protocol HITSAuthUpdateRound {
  Type: Asyn;
  Request: HITSUpdateMessage;
  Response: void;
}

protocol HITSAuthRemoteUpdateAnswer {
  Type: Asyn;
  Request: void;
  Response: void;
}

// Remote Bulk Update
protocol HITSRemoteBulkUpdate {
  Type: Asyn;
  Request: RemoteBulkUpdateMessage;
  Response: void;
}

protocol HITSAuthNormalization {
  Type: Asyn;
  Request: HITSNormalizationMessage;
  Response: void;
}

struct HITSTopNodesServerMessage {
  int NumberOfTopNodes;
  bool SeperateLayers;
}

protocol HITSTopAuthoritiesServer {
  Type: Asyn;
  Request: HITSTopNodesServerMessage;
  Response: void;
}


protocol HITSTopHubsServer {
  Type: Asyn;
  Request: HITSTopNodesServerMessage;
  Response: void;
}

